name: Pull Requests

on:
  pull_request:

env:
  PYTHONUNBUFFERED: "1"
  PYTEST_ADDOPTS: "--color=yes"
  RELEASE: "24.10.2"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  generate-matrix:
    name: Generate labnet.yaml matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Generate matrix
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/local/bin/yq &&\
              sudo chmod +x /usr/local/bin/yq

          matrix=$(yq -o=json '
            . as $root |
            $root.labs as $labs |
            $root.devices as $devices |
            $labs
            | to_entries
            | map(
                .key as $lab |
                .value.devices
                | map(
                    select($devices[.] != null) |
                    {
                      "device": .,
                      "proxy": $labs[$lab].proxy,
                      "target": $devices[.].target,
                      "firmware": $devices[.].firmware
                    }
                  )
              )
            | flatten
          ' labnet.yaml)
          echo "matrix=$(echo "$matrix" | jq -c '.')" >> $GITHUB_ENV

      - name: Filter out devices with open healthcheck issues
        id: set-matrix
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get open issues with healthcheck label
          issues=$(gh issue list --label "healthcheck" --state open --json title,labels --jq '.[] | .title')

          # Filter out matrix entries where proxy/device combination has an open healthcheck issue
          filtered_matrix=$(echo "$matrix" | jq --argjson issues "$(echo "$issues" | jq -R -s 'split("\n") | map(select(length > 0))')" '
            map(select(
              . as $entry |
              ($issues | map(test("\($entry.proxy)/\($entry.device)")) | any) | not
            ))
          ')

          echo "matrix=$(echo "$filtered_matrix" | jq -c '.')" >> $GITHUB_OUTPUT

  test-qemu:
    name: QEMU ${{ matrix.target }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: malta-be
            firmware: openwrt-${RELEASE}-malta-be-vmlinux-initramfs.elf
            dependency: qemu-system-mips

          - target: x86-64
            firmware: openwrt-${RELEASE}-x86-64-generic-squashfs-combined.img.gz
            dependency: qemu-system-x86

          - target: armsr-armv8
            firmware: openwrt-${RELEASE}-armsr-armv8-generic-initramfs-kernel.bin
            dependency: qemu-system-aarch64

    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Setup environment
        run: |
          sudo apt-get update
          sudo apt-get -y install \
            nmap \
            ${{ matrix.dependency }}

          # workaround until ARMSR is fixed
          if [ "${{ matrix.target }}" = "armsr-armv8" ]; then
            export RELEASE=23.05.5
            echo "RELEASE=${RELEASE}" >> $GITHUB_ENV
          fi

          echo "LG_ENV=targets/qemu-${{ matrix.target }}.yaml" >> $GITHUB_ENV
          echo "UPSTREAM_URL=https://downloads.openwrt.org/releases/${RELEASE}/targets" >> $GITHUB_ENV

      - name: Install uv
        uses: astral-sh/setup-uv@v6

      - name: Download test firmware
        env:
          target: ${{ matrix.target }}
        run: |
          wget $UPSTREAM_URL/${target/-/\/}/${{ matrix.firmware }} \
            --output-document ${{ matrix.firmware }}
          FIRMWARE_VERSION=$(curl $UPSTREAM_URL/${target/-/\/}/version.buildinfo)
          echo "FIRMWARE_VERSION=$FIRMWARE_VERSION" >> $GITHUB_ENV

      - name: Run test
        run: |
          gunzip ${{ matrix.firmware }} || true
          firmware=${{ matrix.firmware }}

          uv run pytest tests/ \
            --lg-log \
            --lg-colored-steps \
            --log-cli-level=CONSOLE \
            --firmware $GITHUB_WORKSPACE/${firmware/.gz/}

      - name: Upload console logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: console-${{ matrix.target }}
          path: console_*

  test-real:
    name: Device ${{ matrix.proxy }}/${{ matrix.device }}
    needs: generate-matrix
    runs-on: global-coordinator
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}

    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v6

      - name: Set environment
        run: |
          # workaround until 24.10.x is fixed on tplink_tl-wr1043nd-v3
          if [ "${{ matrix.device }}" = "tplink_tl-wr1043nd-v3" ]; then
            export RELEASE=23.05.5
            echo "RELEASE=${RELEASE}" >> $GITHUB_ENV
          fi

          export firmware=openwrt-${RELEASE}-${{ matrix.target }}-${{ matrix.device }}-${{ matrix.firmware }}
          echo "LG_IMAGE=/tmp/tftp/${{ matrix.device }}/$firmware" >> $GITHUB_ENV
          echo "LG_PROXY=${{ matrix.proxy }}" >> $GITHUB_ENV
          echo "FIRMWARE_IMAGE=$firmware" >> $GITHUB_ENV
          echo "UPSTREAM_URL=https://downloads.openwrt.org/releases/${RELEASE}/targets" >> $GITHUB_ENV

      - name: Download test firmware
        env:
          target: ${{ matrix.target }}
        run: |
          mkdir -p /tmp/tftp/${{ matrix.device }}
          wget $UPSTREAM_URL/${target/-/\/}/$FIRMWARE_IMAGE \
            --output-document /tmp/tftp/${{ matrix.device }}/$FIRMWARE_IMAGE
          FIRMWARE_VERSION=$(curl $UPSTREAM_URL/${target/-/\/}/version.buildinfo)
          echo "FIRMWARE_VERSION=$FIRMWARE_VERSION" >> $GITHUB_ENV

      - name: Wait for free device
        run: |
          eval $(uv run labgrid-client reserve --wait --shell device=${{ matrix.device }})
          echo "LG_TOKEN=$LG_TOKEN" >> $GITHUB_ENV
          echo "LG_PLACE=+" >> $GITHUB_ENV
          uv run labgrid-client -p +$LG_TOKEN lock
          echo "LG_ENV=targets/${{ matrix.device }}.yaml" >> $GITHUB_ENV

      - name: Run test
        run: |
          uv run pytest tests/ \
            --lg-log \
            --lg-colored-steps \
            --log-cli-level=CONSOLE

      - name: Poweroff and unlock device
        if: always()
        run: |
          uv run labgrid-client power off || true
          uv run labgrid-client unlock

      - name: Upload console logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: console-${{ matrix.device }}
          path: console_*
