name: Daily test for snapshots
on:
  push:
    branches:
      - main
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * *"

env:
  PYTHONUNBUFFERED: "1"
  PYTEST_ADDOPTS: "--color=yes"
  UPSTREAM_URL: "https://downloads.openwrt.org/snapshots/targets"
  LG_FEATURE_APK: "true"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  generate-matrix:
    name: Generate labnet.yaml matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Generate matrix
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/local/bin/yq &&\
              sudo chmod +x /usr/local/bin/yq

          matrix=$(yq -o=json '
            . as $root |
            $root.labs as $labs |
            $root.devices as $devices |
            $labs
            | to_entries
            | map(
                .key as $lab |
                .value.devices
                | map(
                    select($devices[.] != null) |
                    {
                      "device": .,
                      "proxy": $labs[$lab].proxy,
                      "target": $devices[.].target,
                      "firmware": $devices[.].firmware
                    }
                  )
              )
            | flatten
          ' labnet.yaml)
          echo "matrix=$(echo "$matrix" | jq -c '.')" >> $GITHUB_ENV

      - name: Filter out devices with open healthcheck issues
        id: set-matrix
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get open issues with healthcheck label
          issues=$(gh issue list --label "healthcheck" --state open --json title,labels --jq '.[] | .title')

          # Filter out matrix entries where proxy/device combination has an open healthcheck issue
          filtered_matrix=$(echo "$matrix" | jq --argjson issues "$(echo "$issues" | jq -R -s 'split("\n") | map(select(length > 0))')" '
            map(select(
              . as $entry |
              ($issues | map(test("\($entry.proxy)/\($entry.device)")) | any) | not
            ))
          ')

          deduplicated_matrix=$(echo "$filtered_matrix" | jq '
            group_by(.device) | map(.[0])
          ')

          echo "matrix=$(echo "$deduplicated_matrix" | jq -c '.')" >> $GITHUB_OUTPUT

  test-real:
    name: Device ${{ matrix.device }}
    needs: generate-matrix
    runs-on: global-coordinator
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}

    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v6

      - name: Set environment
        env:
          target: ${{ matrix.target }}
        run: |
          export firmware=openwrt-${{ matrix.target }}-${{ matrix.device }}-${{ matrix.firmware }}

          mkdir -p /tmp/tftp/${{ matrix.device }}
          wget $UPSTREAM_URL/${target/-/\/}/$firmware \
            --output-document /tmp/tftp/${{ matrix.device }}/$firmware
          (cd /tmp/tftp/ && gzip -d ${{ matrix.device }}/$firmware) || true

          FIRMWARE_VERSION=$(curl $UPSTREAM_URL/${target/-/\/}/version.buildinfo)
          echo "FIRMWARE_VERSION=$FIRMWARE_VERSION" >> $GITHUB_ENV

          echo "LG_IMAGE=/tmp/tftp/${{ matrix.device }}/${firmware/.gz/}" >> $GITHUB_ENV
          echo "LG_PROXY=${{ matrix.proxy }}" >> $GITHUB_ENV

      - name: Wait for free device
        run: |
          eval $(uv run labgrid-client reserve --wait --shell device=${{ matrix.device }})
          echo "LG_TOKEN=$LG_TOKEN" >> $GITHUB_ENV
          echo "LG_PLACE=+" >> $GITHUB_ENV
          uv run labgrid-client -p +$LG_TOKEN lock
          echo "LG_ENV=targets/${{ matrix.device }}.yaml" >> $GITHUB_ENV

      - name: Run test
        run: |
          uv run pytest tests/ \
            --lg-log \
            --lg-colored-steps \
            --log-cli-level=CONSOLE \
            --alluredir allure-results

      - name: Poweroff and unlock device
        if: always()
        run: |
          uv run labgrid-client power off || true
          uv run labgrid-client unlock

      - name: Upload console logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: console-${{ matrix.proxy }}-${{ matrix.device }}
          path: console_*

      - name: Upload allure results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: allure-results-${{ matrix.device }}
          path: allure-results

  test-qemu:
    name: QEMU ${{ matrix.target }}
    runs-on: ubuntu-latest
    env:
      LG_FEATURE_ONLINE: "true"
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: malta-be
            firmware: openwrt-malta-be-vmlinux-initramfs.elf
            dependency: qemu-system-mips

          - target: x86-64
            firmware: openwrt-x86-64-generic-squashfs-combined.img.gz
            dependency: qemu-system-x86

          - target: armsr-armv8
            firmware: openwrt-armsr-armv8-generic-initramfs-kernel.bin
            dependency: qemu-system-aarch64

    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Setup environment
        run: |
          sudo apt-get update
          sudo apt-get -y install \
            nmap \
            ${{ matrix.dependency }}

          echo "LG_ENV=targets/qemu-${{ matrix.target }}.yaml" >> $GITHUB_ENV

      - name: Install uv
        uses: astral-sh/setup-uv@v6

      - name: Download test firmware
        env:
          target: ${{ matrix.target }}
        run: |
          wget $UPSTREAM_URL/${target/-/\/}/${{ matrix.firmware }} \
            --output-document ${{ matrix.firmware }}
          FIRMWARE_VERSION=$(curl $UPSTREAM_URL/${target/-/\/}/version.buildinfo)
          echo "FIRMWARE_VERSION=$FIRMWARE_VERSION" >> $GITHUB_ENV

      - name: Run test
        run: |
          gunzip ${{ matrix.firmware }} || true
          firmware=${{ matrix.firmware }}

          uv run pytest tests/ \
            --lg-log \
            --lg-colored-steps \
            --log-cli-level=CONSOLE \
            --alluredir allure-results \
            --firmware $GITHUB_WORKSPACE/${firmware/.gz/}

      - name: Upload console logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: console-${{ matrix.target }}
          path: console_*

      - name: Upload allure results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: allure-results-${{ matrix.target }}
          path: allure-results

  allure:
    name: Deploy Allure Report
    runs-on: ubuntu-latest
    if: always()
    needs:
      - test-real
      - test-qemu
    steps:
      - name: Download all Allure results
        uses: actions/download-artifact@v4
        with:
          path: allure-results

      - name: Copy all results in the same folder
        continue-on-error: true
        run: cp -fv allure-results/allure-results-*/* allure-results/

      - name: Load test report history
        uses: actions/checkout@v4
        if: always()
        continue-on-error: true
        with:
          ref: gh-pages
          path: gh-pages

      - name: Build test report
        uses: simple-elf/allure-report-action@v1.12
        if: always()
        with:
          gh_pages: gh-pages
          allure_history: allure-history
          allure_results: allure-results

      - name: Publish test report
        uses: peaceiris/actions-gh-pages@v4
        if: always()
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: allure-history
